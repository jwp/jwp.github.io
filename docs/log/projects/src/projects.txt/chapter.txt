! CONTROL:
	/type/
		factor
	/element/
		- (control)`property-set`
		- (source/area)``
		- (coverage-zeros)`0`
		- (coverage-counters)`0`
[ Terminal ]

[ > Command Misdirection ]

Pipe integration operator for performing command substitution into a temporary
fs FIFO that is associated with the standard input of the executed structured literal.
Anonymous pipes would be preferred, but using temporary FIFOs would allow seamless
integration with filesystem tooling. cmd 2>{subcmd}?

[ > Command Substitution ]

Implement command substitution.

Allow sub-commands to be expanded prior to the execution of the primary.

[ > Controller Lock States ]

Implement lock conditions for controlling view behavior.

Explicit locks for holding the prompt, current command, and other states.
Handled similarly to the status modifiers.
Store on views.Structure.

[ > Frame Stencils ]

Implement configuration for managing frame layout presets.

[ > Parallel Instructions ]

Implement parallel instruction execution.

Allow vector expansions to trigger parallel executions instead of integrating the fields.

[ > Per-syntax Type Character Binds ]

Implement syntax type local bindings for custom character insertions.

[ > PWD Redirection ]

Implement working directory redirections.

Traditionally, shells would make use of subshells in order to perform such functions without
affecting the calling environment. The prompt's command syntax does not offer subshells, so
provide a redirect-like syntax to allow convenient working directory switching for single
command cases.

[ > Reference Cursors ]

Implement reference cursors for secondary ranges to be used with redirections.

Reference cursor: an additional types.Cursor managed by Refraction instances to provide a single
level of storage for cursor status.
Notably, this would allow for expressive transformations: str op <(invalid/unknown)&<#> >= or joins str op 4<(invalid/unknown)&<#> <= >>=

[ > Search based revision selection ]

Implement reverse search for prompts and locations.

Allow revisions to be searched and selected based on a user specified filter.

[ > Span Pickup ]

Implement span take and place for character range motion.

Selection based move and copy operations are currently limited to line ranges. This rigidity
severely limits the efficiency of very simple move operations. Take and place operate on the
character range to make small moves or copies quick and painless.

[ > Enclosure selection ]

Range selection support for quotations and parenthetical.

[ > Wayland Support ]

Primarily cairo EGL usage and control mappings.

[ > SDL Support ]

Primarily SDL_Surface usage and control mappings?

- &<https://www.cairographics.org/SDL/>

[ > macOS Double Buffer Performance ]

Optimize double buffer usage of macos-cocoa.

macos-cocoa currently implements a double buffer by performing a full copy back to the off screen
buffer in order to bring it up to date. When changes are large, a full memcpy may be more efficient,
but when they're small, it is likely, or at least possible, that patching the stale buffer would
have superior performance.

[ Factored Projects ]

[ > Monomial-1 Project Protocol ]

Implement monomial-1 project protocol.

When projects are very simple, it may be the case that only one factor is being published.
Requiring project content demands superfluous identities to be created and referenced in
such cases.

Monomial projects are single factor path abstractions with multiple types that can be addressed
directly in cases of ambiguity.

[ > Source Reduced Project Protocol ]

FIP for integrated projects allowing sources to be reduced. .types/variants#factor-type/factor-name

[ Organization ]

[ > python/kernel Isolation ]

Kernel is fairly experimental. If other projects become well defined, isolation
into its own corpus may be necessary.

[ > python/web Integration into python/kernel ]

If kernel is ever isolated into another corpus, python/web is going with it.

[ > fault.security Split ]

Integrate into python/system and python/kernel. While no building of extensions modules is
performed in security, the C code will be better positioned with other C code.

[ Status Frames ]

[ > Sub-units for transaction progress ]

Currently, this is primarily for tests for keeping track of contentions, but should
work well in general.

[ Documentation Publication ]

[ > Test and Coverage Reporting ]

Some coverage reporting is performed, but test reports are not currently joined.

