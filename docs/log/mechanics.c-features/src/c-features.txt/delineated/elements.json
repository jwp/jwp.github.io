["factor", [["chapter", [["admonition", [["directory", [["item", [["key", ["title"], {}], ["value", [["paragraph", ["", ["literal", ["C Language Feature Reference"], {"cast": null}], ""], {"indentation": 2}]], {}]], {"identifier": "title"}], ["item", [["key", ["protocol"], {}], ["value", [["paragraph", ["", ["reference", null, {"source": "<http://if.fault.io/chapters/log.reference>", "type": "hyperlink", "action": null, "cast": null, "url": "http://if.fault.io/chapters/log.reference"}], ""], {"indentation": 2}]], {}]], {"identifier": "protocol"}]], {}]], {"type": "CONTEXT", "title": null}], ["paragraph", ["A small subset of C's features for recalling the label or usage."], {"indentation": 0}], ["section", [["paragraph", ["Re-ordered member initialization."], {"indentation": null}], ["syntax", [["line", ["struct S {"], {}], ["line", ["\tmember1 int;"], {}], ["line", ["\tmember2 int;"], {}], ["line", ["};"], {}], ["line", [""], {}], ["line", ["struct S s = {"], {}], ["line", ["\t.member2 = 1,"], {}], ["line", ["\t.member1 = 0"], {}], ["line", ["};"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}]], {"identifier": "Designated Initializers", "absolute": ["Designated Initializers"], "selector-path": ["Designated Initializers"], "selector-level": null, "selector-multiple": null}], ["section", [["paragraph", ["Parenthesis required to disambiguate from an Array ", ["emphasis", ["of"], {"weight": "1"}], " Pointers."], {"indentation": null}], ["syntax", [["line", ["int (*ia)[2][4] = ptr;"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}], ["paragraph", ["Variable Length Arrays: ", ["reference", null, {"source": "<https://en.wikipedia.org/wiki/Variable-length_array#C99>", "type": "hyperlink", "action": null, "cast": null, "url": "https://en.wikipedia.org/wiki/Variable-length_array#C99"}], ""], {"indentation": 0}], ["directory", [["item", [["key", ["", "", ["literal", ["VLA Pointer Usage"], {"cast": "control/titled"}], ""], {}], ["value", [["syntax", [["line", ["int"], {}], ["line", ["f(int n)"], {}], ["line", ["{"], {}], ["line", ["\t/* Runtime allocation. */"], {}], ["line", ["\tint (*ia)[n] = malloc(sizeof(int[n]));"], {}], ["line", ["\t..."], {}], ["line", ["}"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}]], {}]], {"identifier": "VLA Pointer Usage"}], ["item", [["key", ["", "", ["literal", ["Casts"], {"cast": "control/titled"}], ""], {}], ["value", [["syntax", [["line", ["int (*ia)[n] = (int (*)[])ptr;"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}]], {}]], {"identifier": "Casts"}]], {}]], {"identifier": "Array Pointers", "absolute": ["Array Pointers"], "selector-path": ["Array Pointers"], "selector-level": null, "selector-multiple": null}], ["section", [["paragraph", ["Where ", ["literal", ["fp"], {"cast": null}], " is the variable name."], {"indentation": null}], ["syntax", [["line", ["int (*fp)(int, char *);"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}]], {"identifier": "Function Pointers", "absolute": ["Function Pointers"], "selector-path": ["Function Pointers"], "selector-level": null, "selector-multiple": null}], ["section", [["paragraph", ["Initialization and finalization functions."], {"indentation": null}], ["syntax", [["line", ["__attribute__((constructor))"], {}], ["line", ["void construct(void)"], {}], ["line", ["{"], {}], ["line", ["\t..."], {}], ["line", ["}"], {}], ["line", [""], {}], ["line", ["__attribute__((destructor))"], {}], ["line", ["void destruct(void)"], {}], ["line", ["{"], {}], ["line", ["\t..."], {}], ["line", ["}"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}], ["paragraph", ["C++ attribute syntax:"], {"indentation": 0}], ["syntax", [["line", ["[[constructor]]"], {}], ["line", ["void construct(void)"], {}], ["line", ["{"], {}], ["line", ["\t..."], {}], ["line", ["}"], {}], ["line", [""], {}], ["line", ["[[destructor]]"], {}], ["line", ["void destruct(void)"], {}], ["line", ["{"], {}], ["line", ["\t..."], {}], ["line", ["}"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}], ["directory", [["item", [["key", ["", "", ["literal", [".init, .ctors, and .init_array"], {"cast": "title"}], ""], {}], ["value", [["paragraph", ["", ["reference", null, {"source": "<https://maskray.me/blog/2021-11-07-init-ctors-init-array>", "type": "hyperlink", "action": null, "cast": null, "url": "https://maskray.me/blog/2021-11-07-init-ctors-init-array"}], ""], {"indentation": 1}]], {}]], {"identifier": "\u2219init, \u2219ctors, and \u2219init_array"}]], {}]], {"identifier": "Attribute Constructors", "absolute": ["Attribute Constructors"], "selector-path": ["Attribute Constructors"], "selector-level": null, "selector-multiple": null}], ["section", [["paragraph", ["", ["reference", null, {"source": "<https://en.cppreference.com/w/c/language/bit_field>", "type": "hyperlink", "action": null, "cast": null, "url": "https://en.cppreference.com/w/c/language/bit_field"}], ""], {"indentation": null}]], {"identifier": "Bit Fields", "absolute": ["Bit Fields"], "selector-path": ["Bit Fields"], "selector-level": null, "selector-multiple": null}], ["section", [["set", [["item", [["paragraph", ["", ["reference", null, {"source": "<https://clang.llvm.org/docs/DiagnosticsReference.html>", "type": "hyperlink", "action": null, "cast": null, "url": "https://clang.llvm.org/docs/DiagnosticsReference.html"}], ""], {"indentation": null}]], {}], ["item", [["paragraph", ["", ["reference", null, {"source": "<https://clang.llvm.org/docs/UsersManual.html#options-to-control-error-and-warning-messages>", "type": "hyperlink", "action": null, "cast": null, "url": "https://clang.llvm.org/docs/UsersManual.html#options-to-control-error-and-warning-messages"}], ""], {"indentation": null}]], {}]], {}], ["section", [["paragraph", ["Control the severity of a diagnostic:"], {"indentation": null}], ["syntax", [["line", ["#pragma [clang|gcc] diagnostic [ignored|warning|error|fatal] \"-Wname\""], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}], ["paragraph", ["Push and Pop control state:"], {"indentation": 0}], ["syntax", [["line", ["#pragma [clang|gcc] diagnostic push"], {}], ["line", ["\t#pragma [clang|gcc] diagnostic error \"-Wname\""], {}], ["line", ["\t..."], {}], ["line", ["#pragma [clang|gcc] diagnostic pop"], {}], ["line", ["/* -Wname error is reset after the pop */"], {}], ["line", [""], {}]], {"type": "syntax/c", "qualifier": null}]], {"identifier": "Pragma", "absolute": ["Diagnostics Control", "Pragma"], "selector-path": ["Pragma"], "selector-level": 1, "selector-multiple": null}], ["section", [["directory", [["item", [["key", ["clang"], {}], ["value", [["syntax", [["line", ["# Error control."], {}], ["line", ["clang -Werror=<diagnostic-event>    # Force errors on <diagnostic-event>"], {}], ["line", ["clang -Wno-error=<diagnostic-event> # Disable errors on <diagnostic-event>"], {}], ["line", [""], {}], ["line", ["# Warnings."], {}], ["line", ["clang -W<diagnostic-event>          # Enable warnings on <diagnostic-event>"], {}], ["line", ["clang -Wno-<diagnostic-event>       # Disable warnings on <diagnostic-event>"], {}], ["line", ["clang -Wno-everything               # Disable all warnings"], {}], ["line", ["clang -Weverything                  # Enable all diagnostics."], {}], ["line", [""], {}]], {"type": "syntax/shell", "qualifier": null}]], {}]], {"identifier": "clang"}]], {}]], {"identifier": "Options", "absolute": ["Diagnostics Control", "Options"], "selector-path": ["Options"], "selector-level": 1, "selector-multiple": null}]], {"identifier": "Diagnostics Control", "absolute": ["Diagnostics Control"], "selector-path": ["Diagnostics Control"], "selector-level": null, "selector-multiple": null}], ["section", [["directory", [["item", [["key", ["clang"], {}], ["value", [["syntax", [["line", ["# Preprocessor environment."], {}], ["line", ["clang -dM -E - < /dev/null"], {}], ["line", [""], {}]], {"type": "syntax/shell", "qualifier": null}]], {}]], {"identifier": "clang"}]], {}]], {"identifier": "Query", "absolute": ["Query"], "selector-path": ["Query"], "selector-level": null, "selector-multiple": null}]], {}]], {}]